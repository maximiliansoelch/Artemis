name: DB Server Test

on:
  workflow_call:
    inputs:
      db-name:
        required: true
        type: string
      db-spring-profile:
        required: true
        type: string
      timeout:
        required: true
        type: number

jobs:
  server-test:
    runs-on: ubuntu-latest
    # Limit the number of concurrent db tests to one in total
    timeout-minutes: ${{ inputs.timeout }}
    concurrency:
      group: server-tests-${{ inputs.db-spring-profile }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
            distribution: 'temurin'
            java-version: '${{ env.java }}'
            cache: 'gradle'
      - name: Java Tests
        id: tests
        run: set -o pipefail && SPRING_PROFILES_INCLUDE=${{ inputs.db-spring-profile }} ./gradlew --console=plain test jacocoTestReport -x webapp jacocoTestCoverageVerification | tee tests.log
      - name: Print failed tests
        if: failure()
        run: cat tests.log | grep "Test >.* FAILED" || [[ $? == 1 ]]
      - name: Count failed tests
        id: failedTestCounter
        if: failure()
        run: echo "FAILED_TESTS_COUNT=$(cat tests.log | grep "Test >.* FAILED" | wc -l)" >> $GITHUB_OUTPUT
      - name: Report action failure
        if: failure()
        uses: Sibz/github-status-action@v1
        with:
            authToken: ${{secrets.GITHUB_TOKEN}}
            context: 'Test Run - ${{ inputs.db-name }}'
            description: '❌ ${{ steps.failedTestCounter.outputs.FAILED_TESTS_COUNT }} failed test(s)'
            state: 'failure'
            sha: ${{github.event.pull_request.head.sha || github.sha}}
      - name: Report action success
        if: success()
        uses: Sibz/github-status-action@v1
        with:
            authToken: ${{secrets.GITHUB_TOKEN}}
            context: 'Test Run - ${{ inputs.db-name }}'
            description: '✅ Test succeeded'
            state: 'success'
            sha: ${{github.event.pull_request.head.sha || github.sha}}
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
            name: ${{ inputs.db-name }} Tests
            path: build/test-results/test/*.xml
            reporter: java-junit
      - name: Number of Server Starts
        if: success() || failure()
        run: bash supporting_scripts/extract_number_of_server_starts.sh